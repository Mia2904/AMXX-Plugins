/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <polymorph>

#define PLUGIN "Bind Multifuncion"
#define VERSION "0.1"
#define AUTHOR "Mia2904"

#define BINDS_MOTD "cgmm_binds.txt"

enum MOD_STRUCT
{
	MOD_NAME[32],
	DISABLED_RADIOS
}

new const MODS_DISABLE[][MOD_STRUCT] =
{
	{ "super hero", (1<<1)|(1<<2)|(1<<3) },
	{ "trouble", (1<<3) },
	{ "builder", (1<<3) }
}

new const SUBMODES_DISABLE[][MOD_STRUCT] =
{
	{ "laser", (1<<2)|(1<<3) }
}

new g_enabled;
new g_r1, g_r2, g_r3;

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_clcmd("+power1", "clcmd_radio3");
	register_clcmd("-power1", "clcmd_endradio3");
	register_clcmd("+power2", "clcmd_radio2");
	register_clcmd("-power2", "clcmd_endradio2");
	register_clcmd("+power3", "clcmd_radio1");
	register_clcmd("-power3", "clcmd_endradio1");
	
	register_clcmd("say /binds", "clcmd_binds");
	register_clcmd("say /setbinds", "clcmd_setbinds");
}

public plugin_cfg()
{
	set_task(0.1, "checkmod");
	
	set_task(450.0, "recordar_binds", .flags="b");
}

public recordar_binds()
{
	colored_print(0, "^x04[Binds]^x01 Escribe^x03 /binds^x01 si tienes dificultades con los binds de algun mod.");
}

public clcmd_binds(id)
{
	show_motd(id, BINDS_MOTD);
	if (!is_user_steam(id))
	{
		colored_print(0, "^x04[Binds]^x01 Escribe^x03 /setbinds^x01 para configurar los binds recomendados automaticamente.");
	}
}

public clcmd_setbinds(id)
{
	client_cmd(id, "bind c ^"+power1^";bind x ^"+power2^";bind z ^"+power3^"");
}

public checkmod()
{
	new szMod[32];
	polyn_get_thismod(szMod, charsmax(szMod));
	g_enabled = -1;
	
	//console_print(0, "this mod: %s", szMod);
	for (new i = 0; i < sizeof (MODS_DISABLE); i++)
	{
		if (containi(szMod, MODS_DISABLE[i][MOD_NAME]) != -1)
		{
			g_enabled ^= MODS_DISABLE[i][DISABLED_RADIOS];
			return;
		}
	}
	
	if (polyn_get_this_submode(szMod, charsmax(szMod)))
	{
		for (new i = 0; i < sizeof (SUBMODES_DISABLE); i++)
		{
			if (containi(szMod, SUBMODES_DISABLE[i][MOD_NAME]) != -1)
			{
				g_enabled ^= SUBMODES_DISABLE[i][DISABLED_RADIOS];
				return;
			}
		}
	}
}

public clcmd_radio1(id)
{
	if ((g_enabled & (1<<1)) && !(g_r1 & (1<<(id-1))))
	{
		client_cmd(id, "radio1");
		g_r1 |= (1<<(id-1));
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public clcmd_endradio1(id)
{
	g_r1 &= ~(1<<(id-1));
}

public clcmd_radio2(id)
{
	if ((g_enabled & (1<<2)) && !(g_r2 & (1<<(id-1))))
	{
		client_cmd(id, "radio2");
		g_r2 |= (1<<id-1);
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public clcmd_endradio2(id)
{
	g_r2 &= ~(1<<(id-1));
}

public clcmd_radio3(id)
{
	if ((g_enabled & (1<<3)) && !(g_r3 & (1<<(id-1))))
	{
		client_cmd(id, "radio3");
		g_r3 |= (1<<id-1);
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public clcmd_endradio3(id)
{
	g_r3 &= ~(1<<(id-1));
}

is_user_steam(id)
{
	static auth[8];
	get_user_authid(id, auth, charsmax(auth));
	
	if (auth[0] == 'S' && auth[1] == 'T' && (48 <= auth[6] <= 49))
	{
		return 1;
	}
	
	return 0;
}

stock colored_print(id, const msg[], any:...)
{
	static message[191];
	vformat(message, 190, msg, 3);
	static msgSayText;
	if (!msgSayText)
		msgSayText = get_user_msgid("SayText");
	
	message_begin(id ? MSG_ONE : MSG_BROADCAST, msgSayText, _, id);
	write_byte(33);
	write_string(message);
	message_end();
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
