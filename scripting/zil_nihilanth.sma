/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <engine>
#include <fakemeta>
#include <hamsandwich>
#include <zombieplague>

#define USE_REHLDS

/**
 * Returns a player's human points count.
 *
 * @param id		Player index.
 * @return		Number of human points owned.
 */
native za_get_user_hpoints(id)

/**
 * Sets a player's human points count.
 *
 * @param id		Player index.
 * @param amount	New quantity of human points owned.
 */
native za_set_user_hpoints(id, amount)

/**
 * Returns a player's zombie points count.
 *
 * @param id		Player index.
 * @return		Number of zombie points owned.
 */
native za_get_user_zpoints(id)

/**
 * Sets a player's zombie points count.
 *
 * @param id		Player index.
 * @param amount	New quantity of zombie points owned.
 */
native za_set_user_zpoints(id, amount)

/**
 * Returns a player's experience.
 *
 * @param id		Player index.
 * @return		Owned experience.
 */
native za_get_user_experience(id)

/**
 * Sets a player's experience.
 *
 * @param id		Player index.
 * @param amount	New owned experience.
 */
native za_set_user_experience(id, amount)

#define PLUGIN "ZIL Nihilanth"
#define VERSION "0.1"
#define AUTHOR "Mia2904"

new const REGALO_MODEL[] = "models/zombie_plague/presents.mdl"

new g_door;
new g_janus, g_rock;
new g_itemjanus, g_itemrock;
new g_sprexplode
new cvar_restart

new const Float:box_origins[2][3] =
{
	{ 1333.0, 330.0, 1200.0 },
	{ 1849.0, 2303.0, 1710.0 }
}

public plugin_precache()
{
	new map[15]
	get_mapname(map, 14);
	
	if (!equal(map, "zil_nihilanth"))
	{
		return;
	}
	
	precache_model(REGALO_MODEL)
	g_sprexplode = precache_model("sprites/fire_explode.spr");
}

public plugin_natives()
{
	register_native("zil_nihilanth_start", "native_start", 0);
}

public native_start(plugin, params)
{
	if (!start_mod())
		return 0;
	
	new name[32];
	get_plugin(plugin, name, charsmax(name));
	log_to_file("log_npc.txt", "Plugin '%s' : comenzar Modo Nihilanth", name);
	
	return 1;
}

public plugin_cfg()
{
	server_cmd("no_amxx_uncompress"); 
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	new map[15]
	get_mapname(map, 14);
	
	if (!equal(map, "zil_nihilanth"))
	{
		if (file_exists("maps/zil_nihilanth.bsp"))
		{
			for (new i = 0; i < 10; i++)
			{
				if (rename_file("maps/zil_nihilanth.bsp", "maps/zil_nihilanth.zil", 1))
					break;
			}
		}
		
    #if !defined USE_REHLDS
		set_cvar_string("ir_block_roundend", "");
		set_cvar_num("ir_block_gamecommencing", 0);
		set_cvar_num("ir_block_gamescoring", 0);
		set_task(5.0, "NO_CVARS");
		#endif
    
		set_cvar_num("mp_timelimit", 20);
		
		register_concmd("zil_nihilanth", "activate_nihilanth", ADMIN_IMMUNITY);
		
		return;
	}
	
	#if !defined USE_REHLDS
	set_cvar_string("ir_block_roundend", "*");
	set_cvar_num("ir_block_gamecommencing", 1);
	set_cvar_num("ir_block_gamescoring", 1);
  #endif
		
	set_cvar_num("mp_timelimit", 0);
	set_cvar_num("mp_consistency", 0);
	
	RegisterHam(Ham_Use, "func_button", "fw_UseButton")
	
	g_janus = find_ent_by_tname(-1, "button_janus7")
	g_rock = find_ent_by_tname(-1, "button_rockguitar")
	g_door = find_ent_by_tname(-1, "door_main")
	
	register_srvcmd("zil_nih_brk_dr", "clcmd_door");
	
	g_itemjanus = zp_get_extra_item_id("Janus-7");
	g_itemrock = zp_get_extra_item_id("\wRockGuitar");
	
	cvar_restart = get_cvar_pointer("sv_restart");
	
	set_lights("z");
	
	register_touch("box_ammopacks", "player", "fw_BoxTouch");
	
	set_task(0.1, "check_restart", _, _, _, "b");
}

public NO_CVARS()
{
	set_cvar_string("ir_block_roundend", "");
	set_cvar_num("ir_block_gamecommencing", 0);
	set_cvar_num("ir_block_gamescoring", 0);
}

public activate_nihilanth(id)
{
	if (!id || (~get_user_flags(id) & ADMIN_IMMUNITY))
		return PLUGIN_CONTINUE;
	
	if (!start_mod())
	{
		client_print(id, print_console, "No se encontro la copia del mapa.");
		return PLUGIN_HANDLED;
	}
	
	new name[32];
	get_user_name(id, name, 31);
	
	chatcolor(0, "^x04[ZIL]^x01 ADMIN %s - comienza Modo^x04 Nihilanth.", name);
	log_to_file("log_npc.txt", "Admin %s : comenzar Modo Nihilanth", name);
	
	return PLUGIN_HANDLED;
}

start_mod()
{
	if (!file_exists("maps/zil_nihilanth.zil"))
		return 0;
	
	set_task(3.0, "change_map");
	
	for (new i = 0; i < 10; i++)
	{
		if (rename_file("maps/zil_nihilanth.zil", "maps/zil_nihilanth.bsp", 1))
			break;
	}
	
	message_begin(MSG_ALL, SVC_INTERMISSION)
	message_end()
	
	return 1;
}

public change_map()
	server_cmd("changelevel zil_nihilanth");

public check_restart()
{
	if (get_pcvar_num(cvar_restart))
		set_pcvar_num(cvar_restart, 0);
}

public clcmd_door(id)
{
	remove_entity(g_door);
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION)
	write_coord(2075);
	write_coord(1000);
	write_coord(1300);
	write_short(g_sprexplode)
	write_byte(30)
	write_byte(15)
	write_byte(0)
	message_end(); 
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION)
	write_coord(2075);
	write_coord(1350);
	write_coord(1300);
	write_short(g_sprexplode)
	write_byte(30)
	write_byte(15)
	write_byte(0)
	message_end(); 
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_EXPLOSION)
	write_coord(2075);
	write_coord(1700);
	write_coord(1300);
	write_short(g_sprexplode)
	write_byte(30)
	write_byte(15)
	write_byte(0)
	message_end(); 
	
	set_task(30.0, "create_boxes");
}

public fw_UseButton(ent, id)
{
	if (!(1 <= id <= 32) || !is_user_alive(id))
		return HAM_IGNORED;
	
	if (ent == g_janus)
		zp_force_buy_extra_item(id, g_itemjanus, 1);
	else if (ent == g_rock)
		zp_force_buy_extra_item(id, g_itemrock, 1);
	
	return HAM_IGNORED;
}

public create_boxes()
{
	new ent, Float:origins[3];
	
	for (new i = (get_playersnum() * 2) / 3; i > 0; i--)
	{
		origins[0] = random_float(box_origins[0][0], box_origins[1][0])
		origins[1] = random_float(box_origins[0][1], box_origins[1][1])
		origins[2] = box_origins[(i % 2) ? 1 : 0][2];
		
		if (!is_hull_vacant(origins, HULL_HEAD))
			continue;
		
		ent = create_entity("info_target");
		
		entity_set_origin(ent, origins);
		entity_set_string(ent, EV_SZ_classname, "box_ammopacks");
		entity_set_model(ent, REGALO_MODEL);
		DispatchSpawn(ent);
		entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
		entity_set_int(ent, EV_INT_movetype, MOVETYPE_NONE);
		entity_set_size(ent, Float:{-10.0,-10.0,0.0},Float:{10.0,10.0,25.0})
		set_rendering(ent, kRenderFxGlowShell, 255, 255, 255, kRenderFxNone, 27);
	}
	
	set_task(120.0, "create_boxes");
}

public fw_BoxTouch(ent, id)
{
	entity_set_int(ent, EV_INT_flags, entity_get_int(ent, EV_INT_flags)|FL_KILLME);
	//remove_entity(ent);
	
	switch (random_num(1, 5))
	{
		case 1:
		{
			za_set_user_hpoints(id, za_get_user_hpoints(id)+1);
			zp_set_user_ammo_packs(id, zp_get_user_ammo_packs(id)+200);
			chatcolor(id, "^x04[ZIL]^x01 Has recogido un cofre de^x03 Nihilanth.^x01 Recibes^x04 100^x01 ammopacks y^x04 1^x01 punto^x03 humano.");
		}
		case 2:
		{
			za_set_user_zpoints(id, za_get_user_zpoints(id)+1);
			zp_set_user_ammo_packs(id, zp_get_user_ammo_packs(id)+200);
			chatcolor(id, "^x04[ZIL]^x01 Has recogido un cofre de^x03 Nihilanth.^x01 Recibes^x04 100^x01 ammopacks y^x04 1^x01 punto^x03 zombie.");
		}
		case 3:
		{
			zp_set_user_ammo_packs(id, zp_get_user_ammo_packs(id)+300);
			chatcolor(id, "^x04[ZIL]^x01 Has recogido un cofre de^x03 Nihilanth.^x01 Recibes^x04 300^x01 ammopacks.");
		}
		case 4:
		{
			zp_set_user_ammo_packs(id, zp_get_user_ammo_packs(id)+100);
			za_set_user_experience(id, za_get_user_experience(id)+1000);
			chatcolor(id, "^x04[ZIL]^x01 Has recogido un cofre de^x03 Nihilanth.^x01 Recibes^x04 100^x01 ammopacks y^x04 1000^x01 de experiencia.");
		}
		case 5:
		{
			chatcolor(id, "^x04[ZIL]^x01 Has recogido un cofre de^x03 Nihilanth^x01, pero está vacío.");
		}
	}
}
		
bool:is_hull_vacant(Float:origin[3], hull)
{
	engfunc(EngFunc_TraceHull, origin, origin, 0, hull, 0, 0);
	
	if (!get_tr2(0, TR_StartSolid) && !get_tr2(0, TR_AllSolid) && get_tr2(0, TR_InOpen))
		return true;
	
	return false;
}

chatcolor(id, const input[], any:...)
{
    static szMsg[191], msgSayText;
    
    if (!msgSayText)
        msgSayText = get_user_msgid("SayText");

    vformat(szMsg, 190, input, 3);
    
    message_begin(id ? MSG_ONE_UNRELIABLE : MSG_BROADCAST, msgSayText, .player = id);
    write_byte(id ? id : 33);
    write_string(szMsg);
    message_end();
}
